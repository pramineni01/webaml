/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package lt.vu.mif.dmsti.webaml.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import lt.vu.mif.dmsti.webaml.models.ModelErrorResponse;
import lt.vu.mif.dmsti.webaml.models.ModelSuccessResponse;
import lt.vu.mif.dmsti.webaml.models.WebAMLModel;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

@Validated
@Tag(name = "WebAML Model")
public interface ModelApi {

    default ModelApiDelegate getDelegate() {
        return new ModelApiDelegate() {};
    }

    /**
     * POST /model/{operation} : Solve or convert a WebAML model using specific AML
     *
     * @param operation AML tasks to be executed on the model (required)
     * @param aml AML for solving the model (required)
     * @param webAMLModel Model defined in WebAML format (required)
     * @param solver Solver for solving the model. If none specified default for AML will be used. (optional)
     * @param features Additional features to be used if supported by AML. (optional)
     * @return Successful AML task (status code 200)
     *         or Failed AML task (status code 500)
     */
    @Operation(description = "Solve or convert a WebAML model using specific AML", operationId = "solveModel")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Successful AML task", content = @Content(schema = @Schema(implementation = ModelSuccessResponse.class))),
        @ApiResponse(responseCode = "500", description = "Failed AML task", content = @Content(schema = @Schema(implementation = ModelErrorResponse.class))) })
    @PostMapping(
        value = "/model/{operation}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ModelSuccessResponse> solveModel(@Parameter(description = "AML tasks to be executed on the model",required=true, schema = @Schema(type = "string", defaultValue = "solve", allowableValues = {"solve", "convert"})) @PathVariable("operation") String operation, @NotNull @Parameter(description = "AML for solving the model", required = true, schema = @Schema(allowableValues = {"ampl", "gams", "pyomo", "jump"}, defaultValue = "gams")) @Valid @RequestParam(value = "aml", required = true, defaultValue="gams") String aml, @Parameter(description = "Model defined in WebAML format" ,required=true )  @Valid @RequestBody WebAMLModel webAMLModel, @Parameter(description = "Solver for solving the model. If none specified default for AML will be used.") @Valid @RequestParam(value = "solver", required = false) String solver, @Parameter(description = "Additional features to be used if supported by AML.", schema = @Schema(allowableValues = "presolve, parallelize")) @Valid @RequestParam(value = "features", required = false) String features) {
        return getDelegate().solveModel(operation, aml, webAMLModel, solver, features);
    }

}
